!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARG_LEN	shell.h	25;"	d
BUFSIZE	eval.h	22;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
CFLAGS	Makefile	/^CFLAGS = `pkg-config --cflags ${LIBS}` -g -Wall$/;"	m
Check_Name	valuelib.c	/^int Check_Name(char *name)$/;"	f	signature:(char *name)
Check_Name	valuelib.h	/^int Check_Name(char *str);$/;"	p	signature:(char *str)
Create_Var	valuelib.c	/^char *Create_Var( char *name, char *var )$/;"	f	signature:( char *name, char *var )
DEF_PROMPT	config.h	9;"	d
Do_Control_Cmd	process.c	/^int Do_Control_Cmd(char **args)$/;"	f	signature:(char **args)
Do_Control_Cmd	process.h	/^int Do_Control_Cmd(char **);$/;"	p	signature:(char **)
Env_To_Table	valuelib.c	/^int Env_To_Table(char *env[])$/;"	f	signature:(char *env[])
Env_To_Table	valuelib.h	/^int Env_To_Table(char *env[]);$/;"	p	signature:(char *env[])
Execute	execute.c	/^int Execute(char *argv[])$/;"	f	signature:(char *argv[])
Execute	shell.c	/^extern int Execute(char *argv[]);$/;"	p	file:	signature:(char *argv[])
Find_Item	valuelib.c	/^static struct Value *Find_Item( char *name)$/;"	f	file:	signature:( char *name)
INCLUDE	Makefile	/^INCLUDE = .$/;"	m
IS_Buildin_Cmd	process.c	/^int IS_Buildin_Cmd(char **input)$/;"	f	signature:(char **input)
IS_Buildin_Cmd	process.h	/^int IS_Buildin_Cmd(char **input);$/;"	p	signature:(char **input)
Is_Control_Cmd	process.c	/^int Is_Control_Cmd(char *str)$/;"	f	signature:(char *str)
Is_Control_Cmd	process.h	/^int Is_Control_Cmd(char *input);$/;"	p	signature:(char *input)
LIBS	Makefile	/^LIBS= --libs gtk+-2.0$/;"	m
MAX_ARGS	shell.h	24;"	d
NATRULE	process.c	/^	NATRULE,$/;"	e	enum:__anon1	file:
OBJS	Makefile	/^OBJS = $(SRC:.c=.o)$/;"	m
Ok_Execute	process.c	/^int Ok_Execute()$/;"	f
Ok_Execute	process.h	/^int Ok_Execute();$/;"	p	signature:()
PROGRAM	Makefile	/^PROGRAM = shell$/;"	m
Process	process.c	/^int Process(char **input)$/;"	f	signature:(char **input)
Process	shell.h	/^int Process(char **input);$/;"	p	signature:(char **input)
Process_Buildin_Cmd	process.c	/^int Process_Buildin_Cmd(char **cmd)$/;"	f	signature:(char **cmd)
Process_Buildin_Cmd	process.h	/^int Process_Buildin_Cmd(char **cmd);$/;"	p	signature:(char **cmd)
R_FALSE	config.h	12;"	d
R_TRUE	config.h	11;"	d
SRC	Makefile	/^SRC = mainWindow.c shell.c eval.c execute.c process.c valuelib.c$/;"	m
Shell_Main	shell.c	/^void Shell_Main(char *command_line)$/;"	f	signature:(char *command_line)
Shell_Main	shell.h	/^void Shell_Main(char *command_line);$/;"	p	signature:(char *command_line)
States	process.c	/^} States;$/;"	t	typeref:enum:__anon1	file:
Syntax_Error	process.c	/^void Syntax_Error(char *ckstr)$/;"	f	signature:(char *ckstr)
Syntax_Error	process.h	/^void Syntax_Error(char *ckstr);$/;"	p	signature:(char *ckstr)
THEN_BLOCK	process.c	/^	THEN_BLOCK$/;"	e	enum:__anon1	file:
Table_To_Env	valuelib.c	/^char **Table_To_Env()$/;"	f
Table_To_Env	valuelib.h	/^char **Table_To_Env();$/;"	p	signature:()
Value	valuelib.c	/^struct Value$/;"	s	file:
Value::global	valuelib.c	/^	int  global;$/;"	m	struct:Value	file:	access:public
Value::str	valuelib.c	/^	char *str;$/;"	m	struct:Value	file:	access:public
Value_Export	valuelib.c	/^int Value_Export(char *name)$/;"	f	signature:(char *name)
Value_Export	valuelib.h	/^int Value_Export(char *name);$/;"	p	signature:(char *name)
Value_List	valuelib.c	/^void Value_List()$/;"	f
Value_List	valuelib.h	/^void Value_List();$/;"	p	signature:()
Value_Store	valuelib.c	/^int Value_Store(char *var)$/;"	f	signature:(char *var)
Value_Store	valuelib.h	/^int Value_Store(char *var);$/;"	p	signature:(char *var)
WANT_THEN	process.c	/^	WANT_THEN,$/;"	e	enum:__anon1	file:
__CONFIG_H	config.h	7;"	d
__EVAL_H__	eval.h	20;"	d
__SHELL_H__	shell.h	22;"	d
__VALUELIB_H__	valuelib.h	19;"	d
buffer	mainWindow.c	/^GtkTextBuffer *buffer;$/;"	v
count	mainWindow.c	/^static gint   count = 0;$/;"	v	file:
create_str	eval.c	/^char * create_str(char *begin, int len)$/;"	f	signature:(char *begin, int len)
create_str	eval.h	/^char * create_str(char *begin, int len);$/;"	p	signature:(char *begin, int len)
destroy	mainWindow.c	/^static void destroy(GtkWidget *widget, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget, gpointer data)
destroy	mainWindow.c	/^static void destroy(GtkWidget *widget, gpointer data);$/;"	p	file:	signature:(GtkWidget *widget, gpointer data)
emalloc	eval.c	/^void *emalloc(size_t n)$/;"	f	signature:(size_t n)
erealloc	eval.c	/^void *erealloc(void *point, size_t n)$/;"	f	signature:(void *point, size_t n)
fatal	eval.c	/^void fatal(char *str_err, char *str_error, int exit_code)$/;"	f	signature:(char *str_err, char *str_error, int exit_code)
fatal	eval.h	/^void fatal(char *str_err, char *str_error, int exit_code);$/;"	p	signature:(char *str_err, char *str_error, int exit_code)
fatal	shell.h	/^void fatal(char *str_err, char *str_error, int exit_code);$/;"	p	signature:(char *str_err, char *str_error, int exit_code)
free_list	eval.c	/^void free_list(char **list)$/;"	f	signature:(char **list)
free_list	eval.h	/^void free_list(char **list);$/;"	p	signature:(char **list)
g_Value	valuelib.c	/^static struct Value g_Value[MAX_ARGS];$/;"	v	typeref:struct:Value	file:
g_buf_cmd	mainWindow.c	/^static gchar  g_buf_cmd[512];$/;"	v	file:
global	valuelib.c	/^	int  global;$/;"	m	struct:Value	file:	access:public
if_result	process.c	/^static int if_result  = R_TRUE;$/;"	v	file:
if_state	process.c	/^static int if_state   = NATRULE;$/;"	v	file:
initialize	mainWindow.c	/^void initialize()$/;"	f
initialize	mainWindow.c	/^void initialize();$/;"	p	file:
is_none_c	eval.c	28;"	d	file:
iter	mainWindow.c	/^GtkTextIter   iter;$/;"	v
last_state	process.c	/^static int last_state = R_FALSE;$/;"	v	file:
main	mainWindow.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
read_command	eval.c	/^char * read_command(FILE *fp)$/;"	f	signature:(FILE *fp)
read_command	eval.h	/^char * read_command(FILE *fp);$/;"	p	signature:(FILE *fp)
spiltline	eval.c	/^char **spiltline(char *cmdline)$/;"	f	signature:(char *cmdline)
spiltline	eval.h	/^char **spiltline(char *cmdline);$/;"	p	signature:(char *cmdline)
str	valuelib.c	/^	char *str;$/;"	m	struct:Value	file:	access:public
virtual_keyboard_drive	mainWindow.c	/^static gboolean virtual_keyboard_drive(GtkWidget *widget, GdkEventKey *event, gpointer data)$/;"	f	file:	signature:(GtkWidget *widget, GdkEventKey *event, gpointer data)
virtual_keyboard_drive	mainWindow.c	/^static gboolean virtual_keyboard_drive(GtkWidget *widget, GdkEventKey *event, gpointer data);$/;"	p	file:	signature:(GtkWidget *widget, GdkEventKey *event, gpointer data)
