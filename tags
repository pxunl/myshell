!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARG_LEN	src/shell/shell.c	30;"	d	file:
BUFSIZE	src/shell/eval.h	20;"	d
CC	src/gtk_ui/Makefile	/^CC = gcc$/;"	m
CC	src/shell/Makefile	/^CC = gcc$/;"	m
CFLAGS	src/gtk_ui/Makefile	/^CFLAGS = `pkg-config --cflags ${LIBS}` -g -Wall$/;"	m
CFLAGS	src/shell/Makefile	/^CFLAGS = -g -Wall$/;"	m
DEF_PROMPT	src/shell/config.h	8;"	d
Do_Control_Command	src/shell/process.c	/^int Do_Control_Command(char **);$/;"	p	file:	signature:(char **)
FAIL	src/shell/execute.c	28;"	d	file:
Is_Control_Command	src/shell/process.c	/^int Is_Control_Command(char *);$/;"	p	file:	signature:(char *)
LIBS	src/gtk_ui/Makefile	/^LIBS= --libs gtk+-2.0$/;"	m
MAX_ARGS	src/shell/shell.c	29;"	d	file:
OBJS	src/gtk_ui/Makefile	/^OBJS = $(SRC:.c=.o)$/;"	m
OBJS	src/shell/Makefile	/^OBJS = $(SRC:.c=.o)$/;"	m
Ok_To_Execute	src/shell/process.c	/^int Ok_To_Execute();$/;"	p	file:
PROGRAM	src/gtk_ui/Makefile	/^PROGRAM = myshell$/;"	m
PROGRAM	src/shell/Makefile	/^PROGRAM = shell$/;"	m
Process	src/shell/process.c	/^int Process(char **input)$/;"	f	signature:(char **input)
Process	src/shell/shell.h	/^int Process(char **input);$/;"	p	signature:(char **input)
SRC	src/gtk_ui/Makefile	/^SRC = mainWindow.c$/;"	m
SRC	src/shell/Makefile	/^SRC =  shell.c eval.c$/;"	m
TRUE	src/shell/execute.c	29;"	d	file:
cb_button	src/gtk_ui/example/box.c	/^void cb_button(GtkWidget *widget, gpointer data)$/;"	f	signature:(GtkWidget *widget, gpointer data)
cb_button	src/gtk_ui/example/button.c	/^void cb_button(GtkWidget *widget, gpointer data)$/;"	f	signature:(GtkWidget *widget, gpointer data)
create_str	src/shell/eval.c	/^char * create_str(char *begin, int len)$/;"	f	signature:(char *begin, int len)
create_str	src/shell/eval.h	/^char * create_str(char *begin, int len);$/;"	p	signature:(char *begin, int len)
delete_event	src/gtk_ui/example/example_windows.c	/^gint delete_event(GtkWidget *widget,GdkEvent *event,gpointer data)$/;"	f	signature:(GtkWidget *widget,GdkEvent *event,gpointer data)
destroy	src/gtk_ui/example/example_windows.c	/^void destroy(GtkWidget *widget,gpointer data)$/;"	f	signature:(GtkWidget *widget,gpointer data)
destroy	src/gtk_ui/mainWindow.c	/^void destroy(GtkWidget *widget, gpointer data)$/;"	f	signature:(GtkWidget *widget, gpointer data)
destroy	src/gtk_ui/mainWindow.c	/^void destroy(GtkWidget *widget, gpointer data);$/;"	p	file:	signature:(GtkWidget *widget, gpointer data)
emalloc	src/shell/eval.c	/^void *emalloc(size_t n)$/;"	f	signature:(size_t n)
erealloc	src/shell/eval.c	/^void *erealloc(void *point, size_t n)$/;"	f	signature:(void *point, size_t n)
execute	src/shell/execute.c	/^int execute(char *argv[])$/;"	f	signature:(char *argv[])
execute	src/shell/shell.c	/^extern int execute(char *argv[]);$/;"	p	file:	signature:(char *argv[])
fatal	src/shell/eval.c	/^void fatal(char *str_err, char *str_error, int exit_code)$/;"	f	signature:(char *str_err, char *str_error, int exit_code)
fatal	src/shell/eval.h	/^void fatal(char *str_err, char *str_error, int exit_code);$/;"	p	signature:(char *str_err, char *str_error, int exit_code)
free_list	src/shell/eval.c	/^void free_list(char **list)$/;"	f	signature:(char **list)
free_list	src/shell/eval.h	/^void free_list(char **list);$/;"	p	signature:(char **list)
hello	src/gtk_ui/example/example_windows.c	/^void hello(GtkWidget *widget,gpointer data)$/;"	f	signature:(GtkWidget *widget,gpointer data)
initialize	src/shell/shell.c	/^void initialize()$/;"	f
initialize	src/shell/shell.c	/^void initialize();$/;"	p	file:
is_none_c	src/shell/eval.c	26;"	d	file:
main	src/gtk_ui/example/box.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	src/gtk_ui/example/button.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	src/gtk_ui/example/example_windows.c	/^int main( int argc, char *argv[] )$/;"	f	signature:( int argc, char *argv[] )
main	src/gtk_ui/mainWindow.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	src/shell/shell.c	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
read_command	src/shell/eval.c	/^char * read_command(FILE *fp)$/;"	f	signature:(FILE *fp)
read_command	src/shell/eval.h	/^char * read_command(FILE *fp);$/;"	p	signature:(FILE *fp)
spiltline	src/shell/eval.c	/^char **spiltline(char *cmdline)$/;"	f	signature:(char *cmdline)
spiltline	src/shell/eval.h	/^char **spiltline(char *cmdline);$/;"	p	signature:(char *cmdline)
